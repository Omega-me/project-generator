using AutoMapper;
using Hotel_listing.Application.Contracts.RepositoryManager.Command;
using Hotel_listing.Application.Contracts.RepositoryManager.Query;
using Hotel_listing.Application.Exceptions.ValidationResponseFilters;
using Hotel_listing.Domain.Entitites;
using Hotel_listing.Presantation.Managers;
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;

namespace {{namespacetext}};
[{{entity}}ModelStateFilter]
public {{classtype}} {{classname}} {{inherits}}
{
    public {{classname}}(IQuery query, ICommands command,IMapper mapper) 
        : base(query,command,mapper)
    { }
    

    [HttpGet]
    public async Task<ActionResult<List<{{entity}}>>> GetAll()
    {
        return HandleResponse(await {{entity}}Manager.GetAll(Query));
    }
        
    [HttpGet("{id:int}")]
    public async Task<ActionResult<{{entity}}>> GetOne(int id)
    {
        return HandleResponse(await {{entity}}Manager.GetOne(id, Query));
    }

    [HttpPost]
    public async Task<ActionResult<{{entity}}>> Create([FromBody] {{entity}} data)
    {
        return HandleResponse(await {{entity}}Manager.Create(data,Command,Mapper));
    }

    [HttpDelete("{id:int}")]
    public async Task<IActionResult> Delete(int id)
    {
        return HandleResponse(await {{entity}}Manager.Delete(id,Query,Command));
    }

    [HttpDelete]
    public async Task<IActionResult> DeleteRange([FromBody]List<int> ids)
    {
        return HandleResponse(await {{entity}}Manager.DeleteRange(ids,Query,Command));
    }

    [HttpPut("{id:int}")]
    public async Task<ActionResult<{{entity}}>> Update(int id,[FromBody] {{entity}} data)
    {
        return HandleResponse(await {{entity}}Manager.Update(id,data,Query,Command,Mapper));
    }

    [HttpPatch("{id:int}")]
    public async Task<ActionResult<{{entity}}>> UpdatePartial(int id, [FromBody] JsonPatchDocument data)
    {
        return HandleResponse(await {{entity}}Manager.UpdatePartial(id,data,Query,Command,Mapper));
    }
}