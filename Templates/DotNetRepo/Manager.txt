using AutoMapper;
using Hotel_listing.Application.Configurations.Response;
using Hotel_listing.Application.Contracts.RepositoryManager.Command;
using Hotel_listing.Application.Contracts.RepositoryManager.Query;
using Hotel_listing.Domain.Entitites;
using Microsoft.AspNetCore.JsonPatch;

namespace {{namespacetext}}
public  static class {{entity}}Manager 
{
    #region Managers and response builders
    public static async Task<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}> GetAll(IQuery query)
    {
        IList<{{entity}}> data =await query.{{entity}}.GetAll();
        return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
        {
            r.Results = data;
            r.StatusCode = StatusCodes.Status200OK;
            r.Success = true;
            r.Count = data.Count;
        });
    }
    public static async Task<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}> GetOne(int id, IQuery query)
    {
        {{entity}} data = await query.{{entity}}.Get(x => x.Id == id);
        if (data == null)
        {
            return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
            {
                r.Success = false;
                r.StatusCode = StatusCodes.Status404NotFound;
                r.Errors = new List<BaseError>
                {   
                    new BaseError()
                    {
                        ErrorMessage = "The {{entity}} you are looking for does not exists."
                    }
                };
            });
            
        }
        
        return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
        {
            r.Results = data;
            r.Success = true;
            r.StatusCode = StatusCodes.Status200OK;
            r.Count = 1;
        });
    }
    public static async Task<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}> Create({{entity}} data,ICommands command,IMapper mapper)
    {
        {{entity}} {{entitylowercase}}Data = mapper.Map<{{entity}}>(data);
        await command.{{entity}}.Insert({{entitylowercase}}Data);
        await command.Save();
        return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
        {
            r.Results = data;
            r.StatusCode = StatusCodes.Status201Created;
        });
    }
    public static async Task<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}> Delete(int id,IQuery query,ICommands command)
    {
        {{entity}} data = await query.{{entity}}.Get(x => x.Id == id);
        if (data == null)
        {
            return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
            {
                r.StatusCode = StatusCodes.Status404NotFound;
                r.Success = false;
                r.Errors = new List<BaseError>
                {   
                    new BaseError()
                    {
                        ErrorMessage = "The {{entity}} you are looking for does not exists."
                    }
                };
            });
        }
        await command.{{entity}}.Delete(id);
        await command.Save();
        return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
        {
            r.StatusCode = StatusCodes.Status204NoContent;
        });
    }
    //TODO
    public static async Task<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}> DeleteRange(List<int> ids,IQuery query, ICommands command)
    {
        IEnumerable<{{entity}}> data = Array.Empty<{{entity}}>();
        foreach (var id in ids)
        {
            data.ToList().Add(await query.{{entity}}.Get(c=>c.Id==id));
        }
        if (data.ToList().Count == 0)
        {
            return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
            {
                r.StatusCode = StatusCodes.Status404NotFound;
                r.Success = false;
                r.Errors = new List<BaseError>
                {   
                    new BaseError()
                    {
                        ErrorMessage = "The {{entity}} you are looking for does not exists."
                    }
                };
            });
        }
        command.{{entity}}.DeleteRange(data);
        await command.Save();
        return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
        {
            r.StatusCode = StatusCodes.Status204NoContent;
        });
    }
    public static async Task<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}> Update(int id, {{entity}} data, IQuery query, ICommands command, IMapper mapper)
    {
        if (id != data.Id)
        {
            return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
            {
                r.StatusCode = StatusCodes.Status400BadRequest;
                r.Success = false;
                r.Errors = new List<BaseError>
                {   
                    new BaseError()
                    {
                        ErrorMessage = "The {{entity}} you are looking for does not exists."
                    }
                };
            });
        }
        {{entity}} {{entitylowercase}}Data = await query.{{entity}}.Get(x => x.Id == id);
        if ({{entitylowercase}}Data == null)
        {
            return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
            {
                r.StatusCode = StatusCodes.Status404NotFound;
                r.Success = false;
                r.Errors = new List<BaseError>
                {   
                    new BaseError()
                    {
                        ErrorMessage = "The {{entity}} you are looking for does not exists."
                    }
                };
            });
        }
        mapper.Map(data, {{entitylowercase}}Data);
        command.{{entity}}.Update({{entitylowercase}}Data);
        await command.Save();
        
        return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
        {
            r.Results = data;
            r.StatusCode = StatusCodes.Status200OK;
            r.Success = true;
        });
    }
    public static async Task<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}> UpdatePartial(int id, JsonPatchDocument data, IQuery query, ICommands command,IMapper mapper)
    {
        {{entity}} {{entitylowercase}}Data = await query.{{entity}}.Get(x => x.Id == id);
        if ({{entitylowercase}}Data == null)
        {
            return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
            {
                r.StatusCode = StatusCodes.Status404NotFound;
                r.Success = false;
                r.Errors = new List<BaseError>
                {   
                    new BaseError()
                    {
                        ErrorMessage = "The {{entity}} you are looking for does not exists."
                    }
                };
            });
        }
        command.{{entity}}.UpdatePartial({{entitylowercase}}Data,data);
        await command.Save();
        return new {{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}().BuildResult<{{if customresponse}}{{entity}}Response{{else}}BaseResponse<object,object>{{end}}>(r =>
        {
            r.Results = {{entitylowercase}}Data;
            r.StatusCode = StatusCodes.Status200OK;
            r.Success = true;
        });
    }
    #endregion
}
